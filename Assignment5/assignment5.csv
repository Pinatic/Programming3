Question,Answer,Explain
1,9703,"== Parsed Logical Plan ==
Deduplicate [_c11#28]
+- Filter NOT (_c11#28 = -)
   +- Project [_c11#28]
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
_c11: string
Deduplicate [_c11#28]
+- Filter NOT (_c11#28 = -)
   +- Project [_c11#28]
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Aggregate [_c11#28], [_c11#28]
+- Project [_c11#28]
   +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- HashAggregate(keys=[_c11#28], functions=[], output=[_c11#28])
   +- Exchange hashpartitioning(_c11#28, 200), ENSURE_REQUIREMENTS, [id=#36]
      +- HashAggregate(keys=[_c11#28], functions=[], output=[_c11#28])
         +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
            +- FileScan csv [_c11#28] Batched: false, DataFilters: [isnotnull(_c11#28), NOT (_c11#28 = -)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c11), Not(EqualTo(_c11,-))], ReadSchema: struct<_c11:string>
"
2,198.06420694630526,"== Parsed Logical Plan ==
Deduplicate [_c11#28]
+- Filter NOT (_c11#28 = -)
   +- Project [_c11#28]
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
_c11: string
Deduplicate [_c11#28]
+- Filter NOT (_c11#28 = -)
   +- Project [_c11#28]
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Aggregate [_c11#28], [_c11#28]
+- Project [_c11#28]
   +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- HashAggregate(keys=[_c11#28], functions=[], output=[_c11#28])
   +- Exchange hashpartitioning(_c11#28, 200), ENSURE_REQUIREMENTS, [id=#153]
      +- HashAggregate(keys=[_c11#28], functions=[], output=[_c11#28])
         +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
            +- FileScan csv [_c11#28] Batched: false, DataFilters: [isnotnull(_c11#28), NOT (_c11#28 = -)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c11), Not(EqualTo(_c11,-))], ReadSchema: struct<_c11:string>
"
3,GO:2001070,"== Parsed Logical Plan ==
'Aggregate ['max(_c13#75) AS max(_c13)#93]
+- Project [_c13#75]
   +- Filter NOT (_c13#30 = -)
      +- Project [_c13#75, _c13#30]
         +- Project [_c0#17, _c1#18, _c2#19, _c3#20, _c4#21, _c5#22, _c6#23, _c7#24, _c8#25, _c9#26, _c10#27, _c11#28, _c12#29, _c13#75, _c14#31, _c13#30]
            +- Generate explode(split(_c13#30, \|, -1)), false, [_c13#75]
               +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
max(_c13): string
Aggregate [max(_c13#75) AS max(_c13)#93]
+- Project [_c13#75]
   +- Filter NOT (_c13#30 = -)
      +- Project [_c13#75, _c13#30]
         +- Project [_c0#17, _c1#18, _c2#19, _c3#20, _c4#21, _c5#22, _c6#23, _c7#24, _c8#25, _c9#26, _c10#27, _c11#28, _c12#29, _c13#75, _c14#31, _c13#30]
            +- Generate explode(split(_c13#30, \|, -1)), false, [_c13#75]
               +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Aggregate [max(_c13#75) AS max(_c13)#93]
+- Generate explode(split(_c13#30, \|, -1)), [0], false, [_c13#75]
   +- Project [_c13#30]
      +- Filter (isnotnull(_c13#30) AND NOT (_c13#30 = -))
         +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- SortAggregate(key=[], functions=[max(_c13#75)], output=[max(_c13)#93])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#319]
      +- SortAggregate(key=[], functions=[partial_max(_c13#75)], output=[max#97])
         +- Generate explode(split(_c13#30, \|, -1)), false, [_c13#75]
            +- Filter (isnotnull(_c13#30) AND NOT (_c13#30 = -))
               +- FileScan csv [_c13#30] Batched: false, DataFilters: [isnotnull(_c13#30), NOT (_c13#30 = -)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c13), Not(EqualTo(_c13,-))], ReadSchema: struct<_c13:string>
"
4,311.5315754307403,"== Parsed Logical Plan ==
'Aggregate ['avg(abs((_c7 - _c8))#125) AS avg(abs((_c7 - _c8)))#128]
+- Project [abs((cast(_c7#24 as double) - cast(_c8#25 as double))) AS abs((_c7 - _c8))#125]
   +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
avg(abs((_c7 - _c8))): double
Aggregate [avg(abs((_c7 - _c8))#125) AS avg(abs((_c7 - _c8)))#128]
+- Project [abs((cast(_c7#24 as double) - cast(_c8#25 as double))) AS abs((_c7 - _c8))#125]
   +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Aggregate [avg(abs((_c7 - _c8))#125) AS avg(abs((_c7 - _c8)))#128]
+- Project [abs((cast(_c7#24 as double) - cast(_c8#25 as double))) AS abs((_c7 - _c8))#125]
   +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- HashAggregate(keys=[], functions=[avg(abs((_c7 - _c8))#125)], output=[avg(abs((_c7 - _c8)))#128])
   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#384]
      +- HashAggregate(keys=[], functions=[partial_avg(abs((_c7 - _c8))#125)], output=[sum#133, count#134L])
         +- Project [abs((cast(_c7#24 as double) - cast(_c8#25 as double))) AS abs((_c7 - _c8))#125]
            +- FileScan csv [_c7#24,_c8#25] Batched: false, DataFilters: [], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<_c7:string,_c8:string>
"
5,"['IPR027417', 'IPR002347', 'IPR003439', 'IPR036388', 'IPR036259', 'IPR003593', 'IPR036390', 'IPR036291', 'IPR000515', 'IPR001789']","== Parsed Logical Plan ==
'Aggregate ['_c11], ['_c11, count(1) AS count#167L]
+- Filter NOT (_c11#28 = -)
   +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
_c11: string, count: bigint
Aggregate [_c11#28], [_c11#28, count(1) AS count#167L]
+- Filter NOT (_c11#28 = -)
   +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Aggregate [_c11#28], [_c11#28, count(1) AS count#167L]
+- Project [_c11#28]
   +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- HashAggregate(keys=[_c11#28], functions=[count(1)], output=[_c11#28, count#167L])
   +- Exchange hashpartitioning(_c11#28, 200), ENSURE_REQUIREMENTS, [id=#442]
      +- HashAggregate(keys=[_c11#28], functions=[partial_count(1)], output=[_c11#28, count#171L])
         +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
            +- FileScan csv [_c11#28] Batched: false, DataFilters: [isnotnull(_c11#28), NOT (_c11#28 = -)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c11), Not(EqualTo(_c11,-))], ReadSchema: struct<_c11:string>
"
6,"['IPR027417', 'IPR036259', 'IPR036388', 'IPR036890', 'IPR029063', 'IPR035906', 'IPR003594', 'IPR000515', 'IPR029058', 'IPR004358']","DataFrame[_c0: string, _c1: string, _c2: string, _c3: string, _c4: string, _c5: string, _c6: string, _c7: string, _c8: string, _c9: string, _c10: string, _c11: string, _c12: string, _c13: string, _c14: string, percentage: double]"
7,"['domain', 'superfamily', 'protein', 'C-terminal', 'site', 'hydrolase', 'DNA-binding', 'N-terminal', 'conserved', 'family']","== Parsed Logical Plan ==
'Sort ['count DESC NULLS LAST], true
+- Aggregate [_c12#256], [_c12#256, count(1) AS count#260L]
   +- Project [_c12#256]
      +- Generate explode(split(_c12#29,  , -1)), false, [_c12#256]
         +- Project [_c12#29]
            +- Filter NOT (_c12#29 = -)
               +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
_c12: string, count: bigint
Sort [count#260L DESC NULLS LAST], true
+- Aggregate [_c12#256], [_c12#256, count(1) AS count#260L]
   +- Project [_c12#256]
      +- Generate explode(split(_c12#29,  , -1)), false, [_c12#256]
         +- Project [_c12#29]
            +- Filter NOT (_c12#29 = -)
               +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Sort [count#260L DESC NULLS LAST], true
+- Aggregate [_c12#256], [_c12#256, count(1) AS count#260L]
   +- Generate explode(split(_c12#29,  , -1)), [0], false, [_c12#256]
      +- Project [_c12#29]
         +- Filter (isnotnull(_c12#29) AND NOT (_c12#29 = -))
            +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#260L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#260L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [id=#590]
      +- HashAggregate(keys=[_c12#256], functions=[count(1)], output=[_c12#256, count#260L])
         +- Exchange hashpartitioning(_c12#256, 200), ENSURE_REQUIREMENTS, [id=#587]
            +- HashAggregate(keys=[_c12#256], functions=[partial_count(1)], output=[_c12#256, count#264L])
               +- Generate explode(split(_c12#29,  , -1)), false, [_c12#256]
                  +- Filter (isnotnull(_c12#29) AND NOT (_c12#29 = -))
                     +- FileScan csv [_c12#29] Batched: false, DataFilters: [isnotnull(_c12#29), NOT (_c12#29 = -)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c12), Not(EqualTo(_c12,-))], ReadSchema: struct<_c12:string>
"
8,"['HigB-like', 'DUF3463', 'UCP020893', 'ECF-like', 'DUF5989', 'CdiA,', 'NMNAT', 'YjhG/YagF', 'CobN', 'B12']","== Parsed Logical Plan ==
'Sort ['count ASC NULLS FIRST], true
+- Aggregate [_c12#279], [_c12#279, count(1) AS count#283L]
   +- Project [_c12#279]
      +- Generate explode(split(_c12#29,  , -1)), false, [_c12#279]
         +- Project [_c12#29]
            +- Filter NOT (_c12#29 = -)
               +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
_c12: string, count: bigint
Sort [count#283L ASC NULLS FIRST], true
+- Aggregate [_c12#279], [_c12#279, count(1) AS count#283L]
   +- Project [_c12#279]
      +- Generate explode(split(_c12#29,  , -1)), false, [_c12#279]
         +- Project [_c12#29]
            +- Filter NOT (_c12#29 = -)
               +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Sort [count#283L ASC NULLS FIRST], true
+- Aggregate [_c12#279], [_c12#279, count(1) AS count#283L]
   +- Generate explode(split(_c12#29,  , -1)), [0], false, [_c12#279]
      +- Project [_c12#29]
         +- Filter (isnotnull(_c12#29) AND NOT (_c12#29 = -))
            +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#283L ASC NULLS FIRST], true, 0
   +- Exchange rangepartitioning(count#283L ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#689]
      +- HashAggregate(keys=[_c12#279], functions=[count(1)], output=[_c12#279, count#283L])
         +- Exchange hashpartitioning(_c12#279, 200), ENSURE_REQUIREMENTS, [id=#686]
            +- HashAggregate(keys=[_c12#279], functions=[partial_count(1)], output=[_c12#279, count#287L])
               +- Generate explode(split(_c12#29,  , -1)), false, [_c12#279]
                  +- Filter (isnotnull(_c12#29) AND NOT (_c12#29 = -))
                     +- FileScan csv [_c12#29] Batched: false, DataFilters: [isnotnull(_c12#29), NOT (_c12#29 = -)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c12), Not(EqualTo(_c12,-))], ReadSchema: struct<_c12:string>
"
9,"['hydrolase', 'superfamily', 'P-loop', 'nucleoside', 'triphosphate', 'containing', 'domain', 'transporter', 'MetI-like', 'helix-like']","== Parsed Logical Plan ==
'Sort ['count DESC NULLS LAST], true
+- Aggregate [_c12#302], [_c12#302, count(1) AS count#306L]
   +- Project [_c12#302]
      +- Generate explode(split(_c12#29,  , -1)), false, [_c12#302]
         +- Project [_c12#29]
            +- Filter NOT (_c12#29 = -)
               +- Filter _c11#28 IN (IPR027417,IPR036259,IPR036388,IPR036890,IPR029063,IPR035906,IPR003594,IPR000515,IPR029058,IPR004358)
                  +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
_c12: string, count: bigint
Sort [count#306L DESC NULLS LAST], true
+- Aggregate [_c12#302], [_c12#302, count(1) AS count#306L]
   +- Project [_c12#302]
      +- Generate explode(split(_c12#29,  , -1)), false, [_c12#302]
         +- Project [_c12#29]
            +- Filter NOT (_c12#29 = -)
               +- Filter _c11#28 IN (IPR027417,IPR036259,IPR036388,IPR036890,IPR029063,IPR035906,IPR003594,IPR000515,IPR029058,IPR004358)
                  +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Sort [count#306L DESC NULLS LAST], true
+- Aggregate [_c12#302], [_c12#302, count(1) AS count#306L]
   +- Generate explode(split(_c12#29,  , -1)), [0], false, [_c12#302]
      +- Project [_c12#29]
         +- Filter (isnotnull(_c12#29) AND (_c11#28 IN (IPR027417,IPR036259,IPR036388,IPR036890,IPR029063,IPR035906,IPR003594,IPR000515,IPR029058,IPR004358) AND NOT (_c12#29 = -)))
            +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#306L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#306L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [id=#784]
      +- HashAggregate(keys=[_c12#302], functions=[count(1)], output=[_c12#302, count#306L])
         +- Exchange hashpartitioning(_c12#302, 200), ENSURE_REQUIREMENTS, [id=#781]
            +- HashAggregate(keys=[_c12#302], functions=[partial_count(1)], output=[_c12#302, count#310L])
               +- Generate explode(split(_c12#29,  , -1)), false, [_c12#302]
                  +- Project [_c12#29]
                     +- Filter ((isnotnull(_c12#29) AND _c11#28 IN (IPR027417,IPR036259,IPR036388,IPR036890,IPR029063,IPR035906,IPR003594,IPR000515,IPR029058,IPR004358)) AND NOT (_c12#29 = -))
                        +- FileScan csv [_c11#28,_c12#29] Batched: false, DataFilters: [isnotnull(_c12#29), _c11#28 IN (IPR027417,IPR036259,IPR036388,IPR036890,IPR029063,IPR035906,IPR0..., Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c12), In(_c11, [IPR000515,IPR003594,IPR004358,IPR027417,IPR029058,IPR029063,IPR035906..., ReadSchema: struct<_c11:string,_c12:string>
"
10,0.31961294035697624,"== Parsed Logical Plan ==
'Aggregate [_c0#17, '_c2], [_c0#17, '_c2, count(1) AS count#331L]
+- Filter NOT (_c11#28 = -)
   +- Project [_c0#17, _c2#19, _c11#28]
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Analyzed Logical Plan ==
_c0: string, _c2: string, count: bigint
Aggregate [_c0#17, _c2#19], [_c0#17, _c2#19, count(1) AS count#331L]
+- Filter NOT (_c11#28 = -)
   +- Project [_c0#17, _c2#19, _c11#28]
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Optimized Logical Plan ==
Aggregate [_c0#17, _c2#19], [_c0#17, _c2#19, count(1) AS count#331L]
+- Project [_c0#17, _c2#19]
   +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
      +- Relation [_c0#17,_c1#18,_c2#19,_c3#20,_c4#21,_c5#22,_c6#23,_c7#24,_c8#25,_c9#26,_c10#27,_c11#28,_c12#29,_c13#30,_c14#31] csv

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- HashAggregate(keys=[_c0#17, _c2#19], functions=[count(1)], output=[_c0#17, _c2#19, count#331L])
   +- Exchange hashpartitioning(_c0#17, _c2#19, 200), ENSURE_REQUIREMENTS, [id=#869]
      +- HashAggregate(keys=[_c0#17, _c2#19], functions=[partial_count(1)], output=[_c0#17, _c2#19, count#336L])
         +- Project [_c0#17, _c2#19]
            +- Filter (isnotnull(_c11#28) AND NOT (_c11#28 = -))
               +- FileScan csv [_c0#17,_c2#19,_c11#28] Batched: false, DataFilters: [isnotnull(_c11#28), NOT (_c11#28 = -)], Format: CSV, Location: InMemoryFileIndex(1 paths)[file:/data/dataprocessing/interproscan/all_bacilli.tsv], PartitionFilters: [], PushedFilters: [IsNotNull(_c11), Not(EqualTo(_c11,-))], ReadSchema: struct<_c0:string,_c2:string,_c11:string>
"
